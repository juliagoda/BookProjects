diff --git a/src/big_widgets/GitQlient.cpp b/src/big_widgets/GitQlient.cpp
index fbc7a13..b1bfe89 100644
--- a/src/big_widgets/GitQlient.cpp
+++ b/src/big_widgets/GitQlient.cpp
@@ -4,6 +4,7 @@
 #include <GitQlientStyles.h>
 #include <GitQlientSettings.h>
 #include <QPinnableTabWidget.h>
+#include <InitialRepoConfig.h>
 
 #include <QProcess>
 #include <QTabBar>
@@ -12,12 +13,12 @@
 #include <QPushButton>
 #include <QFile>
 #include <QFileDialog>
+#include <QMessageBox>
+#include <GitBase.h>
 
 #include <QLogger.h>
-#include <BenchmarkTool.h>
 
 using namespace QLogger;
-using namespace Benchmarker;
 
 GitQlient::GitQlient(QWidget *parent)
    : GitQlient(QStringList(), parent)
@@ -29,7 +30,6 @@ GitQlient::GitQlient(const QStringList &arguments, QWidget *parent)
    , mRepos(new QPinnableTabWidget())
    , mConfigWidget(new ConfigWidget())
 {
-   BenchmarkStart();
 
    auto repos = parseArguments(arguments);
 
@@ -38,8 +38,6 @@ GitQlient::GitQlient(const QStringList &arguments, QWidget *parent)
    QLog_Info("UI", QString("*                  %1                  *").arg(VER));
    QLog_Info("UI", "*******************************************");
 
-   QFile styles(":/stylesheet");
-
    setStyleSheet(GitQlientStyles::getStyles());
 
    const auto addTab = new QPushButton();
@@ -61,10 +59,13 @@ GitQlient::GitQlient(const QStringList &arguments, QWidget *parent)
 
    connect(mConfigWidget, &ConfigWidget::signalOpenRepo, this, &GitQlient::addRepoTab);
 
-   restorePinnedRepos();
    setRepositories(repos);
 
-   BenchmarkEnd();
+   GitQlientSettings settings;
+   const auto geometry = settings.globalValue("GitQlientGeometry", saveGeometry()).toByteArray();
+
+   if (!geometry.isNull())
+      restoreGeometry(geometry);
 }
 
 GitQlient::~GitQlient()
@@ -83,13 +84,13 @@ GitQlient::~GitQlient()
    }
 
    settings.setGlobalValue(GitQlientSettings::PinnedRepos, pinnedRepos);
+   settings.setGlobalValue("GitQlientGeometry", saveGeometry());
 
    QLog_Info("UI", "*            Closing GitQlient            *\n\n");
 }
 
 void GitQlient::openRepo()
 {
-   BenchmarkStart();
 
    const QString dirName(QFileDialog::getExistingDirectory(this, "Choose the directory of a Git project"));
 
@@ -98,37 +99,27 @@ void GitQlient::openRepo()
       QDir d(dirName);
       addRepoTab(d.absolutePath());
    }
-   BenchmarkEnd();
 }
 
 void GitQlient::setRepositories(const QStringList &repositories)
 {
    QLog_Info("UI", QString("Adding {%1} repositories").arg(repositories.count()));
 
-   BenchmarkStart();
-
    for (const auto &repo : repositories)
       addRepoTab(repo);
-
-   BenchmarkEnd();
 }
 
 void GitQlient::setArgumentsPostInit(const QStringList &arguments)
 {
    QLog_Info("UI", QString("External call with the params {%1}").arg(arguments.join(",")));
 
-   BenchmarkStart();
-
    const auto repos = parseArguments(arguments);
 
    setRepositories(repos);
-
-   BenchmarkEnd();
 }
 
 QStringList GitQlient::parseArguments(const QStringList &arguments)
 {
-   BenchmarkStart();
 
    LogLevel logLevel;
    GitQlientSettings settings;
@@ -136,11 +127,13 @@ QStringList GitQlient::parseArguments(const QStringList &arguments)
 #ifdef DEBUG
    logLevel = LogLevel::Trace;
 #else
-   logLevel = static_cast<LogLevel>(settings.globalValue("logsLevel", static_cast<int>(LogLevel::Info)).toInt());
+   logLevel = static_cast<LogLevel>(settings.globalValue("logsLevel", static_cast<int>(LogLevel::Warning)).toInt());
 #endif
 
-   if (arguments.contains("-noLog") || settings.globalValue("logsDisabled", false).toBool())
+   if (arguments.contains("-noLog") || settings.globalValue("logsDisabled", true).toBool())
       QLoggerManager::getInstance()->pause();
+   else
+      QLoggerManager::getInstance()->overwriteLogLevel(logLevel);
 
    QLog_Info("UI", QString("Getting arguments {%1}").arg(arguments.join(", ")));
 
@@ -176,8 +169,6 @@ QStringList GitQlient::parseArguments(const QStringList &arguments)
    const auto manager = QLoggerManager::getInstance();
    manager->addDestination("GitQlient.log", { "UI", "Git" }, logLevel);
 
-   BenchmarkEnd();
-
    return repos;
 }
 
@@ -188,85 +179,105 @@ void GitQlient::addRepoTab(const QString &repoPath)
 
 void GitQlient::addNewRepoTab(const QString &repoPath, bool pinned)
 {
-   BenchmarkStartMsg(repoPath.toStdString());
-
    if (!mCurrentRepos.contains(repoPath))
    {
-      const auto repoName = repoPath.contains("/") ? repoPath.split("/").last() : "No repo";
-      const auto repo = new GitQlientRepo(repoPath);
+      QFileInfo info(QString("%1/.git").arg(repoPath));
 
-      const auto index = pinned ? mRepos->addPinnedTab(repo, repoName) : mRepos->addTab(repo, repoName);
-
-      connect(repo, &GitQlientRepo::signalEditFile, this, &GitQlient::signalEditDocument);
-      connect(repo, &GitQlientRepo::signalOpenSubmodule, this, [this](const QString &repoName) {
-         const auto currentDir = dynamic_cast<GitQlientRepo *>(sender())->currentDir();
-
-         auto submoduleDir = QString("%1/%2").arg(currentDir, repoName);
+      if (info.isFile() || info.isDir())
+      {
+         conditionallyOpenPreConfigDlg(repoPath);
 
-         QLog_Info("UI", QString("Adding a new tab for the submodule {%1} in {%2}").arg(repoName, currentDir));
+         const auto repoName = repoPath.contains("/") ? repoPath.split("/").last() : "No repo";
+         const auto repo = new GitQlientRepo(repoPath);
+         const auto index = pinned ? mRepos->addPinnedTab(repo, repoName) : mRepos->addTab(repo, repoName);
 
-         addRepoTab(submoduleDir);
-      });
+         connect(repo, &GitQlientRepo::signalEditFile, this, &GitQlient::signalEditDocument);
+         connect(repo, &GitQlientRepo::signalOpenSubmodule, this, &GitQlient::addRepoTab);
+         connect(repo, &GitQlientRepo::repoOpened, this, &GitQlient::onSuccessOpen);
 
-      repo->setRepository(repoName);
+         repo->setRepository(repoName);
 
-      if (!repoPath.isEmpty())
-      {
-         QProcess p;
-         p.setWorkingDirectory(repoPath);
-         p.start("git rev-parse", { "--show-superproject-working-tree" });
-         p.waitForFinished(5000);
+         if (!repoPath.isEmpty())
+         {
+            QProcess p;
+            p.setWorkingDirectory(repoPath);
+            p.start("git rev-parse", { "--show-superproject-working-tree" });
+            p.waitForFinished(5000);
 
-         const auto output = p.readAll().trimmed();
-         const auto isSubmodule = !output.isEmpty();
+            const auto output = p.readAll().trimmed();
+            const auto isSubmodule = !output.isEmpty();
 
-         mRepos->setTabIcon(index, QIcon(isSubmodule ? QString(":/icons/submodules") : QString(":/icons/local")));
+            mRepos->setTabIcon(index, QIcon(isSubmodule ? QString(":/icons/submodules") : QString(":/icons/local")));
 
-         QLog_Info("UI", "Attaching repository to a new tab");
+            QLog_Info("UI", "Attaching repository to a new tab");
 
-         if (isSubmodule)
-         {
-            const auto parentRepo = QString::fromUtf8(output.split('/').last());
+            if (isSubmodule)
+            {
+               const auto parentRepo = QString::fromUtf8(output.split('/').last());
 
-            mRepos->setTabText(index, QString("%1 \u2192 %2").arg(parentRepo, repoName));
+               mRepos->setTabText(index, QString("%1 \u2192 %2").arg(parentRepo, repoName));
 
-            QLog_Info("UI",
-                      QString("Opening the submodule {%1} from the repo {%2} on tab index {%3}")
-                          .arg(repoName, parentRepo)
-                          .arg(index));
+               QLog_Info("UI",
+                         QString("Opening the submodule {%1} from the repo {%2} on tab index {%3}")
+                             .arg(repoName, parentRepo)
+                             .arg(index));
+            }
          }
-      }
 
-      mRepos->setCurrentIndex(index);
+         mRepos->setCurrentIndex(index);
 
-      mCurrentRepos.insert(repoPath);
+         mCurrentRepos.insert(repoPath);
+      }
+      else
+      {
+         QLog_Info("UI", "Trying to open a directory that is not a Git repository.");
+         QMessageBox::information(
+             this, tr("Not a Git repository"),
+             tr("The selected path is not a Git repository. Please make sure you opened the correct directory."));
+      }
    }
    else
       QLog_Warning("UI", QString("Repository at {%1} already opened. Skip adding it again.").arg(repoPath));
-
-   BenchmarkEnd();
 }
 
 void GitQlient::closeTab(int tabIndex)
 {
-   BenchmarkStart();
-
    auto repoToRemove = dynamic_cast<GitQlientRepo *>(mRepos->widget(tabIndex));
 
    QLog_Info("UI", QString("Removing repository {%1}").arg(repoToRemove->currentDir()));
 
    mCurrentRepos.remove(repoToRemove->currentDir());
-   mRepos->removeTab(tabIndex);
+   // mRepos->removeTab(tabIndex);
    repoToRemove->close();
-
-   BenchmarkEnd();
 }
 
 void GitQlient::restorePinnedRepos()
 {
    GitQlientSettings settings;
-   const auto pinnedRepos = settings.globalValue("PinnedRepos", QStringList()).toStringList();
+   const auto pinnedRepos = settings.globalValue(GitQlientSettings::PinnedRepos, QStringList()).toStringList();
 
    for (auto &repo : pinnedRepos)
       addNewRepoTab(repo, true);
 }
+
+void GitQlient::onSuccessOpen(const QString &fullPath)
+{
+   GitQlientSettings settings;
+   settings.setProjectOpened(fullPath);
+
+   mConfigWidget->onRepoOpened();
+}
+
+void GitQlient::conditionallyOpenPreConfigDlg(const QString &repoPath)
+{
+   QSharedPointer<GitBase> git(new GitBase(repoPath));
+
+   GitQlientSettings settings;
+   auto maxCommits = settings.localValue(git->getGitQlientSettingsDir(), "MaxCommits", -1).toInt();
+
+   if (maxCommits == -1)
+   {
+      const auto preConfig = new InitialRepoConfig(git, this);
+      preConfig->exec();
+   }
+}
